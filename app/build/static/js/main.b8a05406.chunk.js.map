{"version":3,"sources":["serviceWorker.js","components/AppBar/index.js","pages/index.js","index.js","router.js"],"names":["Boolean","window","location","hostname","match","socket","io","useStyles","makeStyles","theme","iconButton","marginRight","spacing","classes","AppBar","position","Toolbar","Typography","variant","style","flexGrow","IconButton","edge","color","className","onClick","emit","Loop","PowerSettingsNew","root","height","width","overflow","backgroundImage","backgroundRepeat","backgroundSize","video","margin","zIndex","useState","lastPosition","setLastPosition","lastForce","setLastForce","useEffect","direction","CENTER","options","onMove","_","degree","angle","force","roundedDegree","roundedForce","Math","round","ReactDOM","render","path","component","Index","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oGCbAC,EAASC,IAAG,6BAEZC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACtCC,WAAY,CACXC,YAAaF,EAAMG,QAAQ,OAId,aACX,IAAMC,EAAUN,IAGhB,OACI,kBAACO,EAAA,EAAD,CAAQC,SAAS,YACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAAEC,SAAU,IAA5C,WAGA,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,UAAWX,EAAQH,WAAYe,QAPrE,kBAAMpB,EAAOqB,KAAK,YAQjB,kBAACC,EAAA,EAAD,OAEJ,kBAACN,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,UAAWX,EAAQH,WAAYe,QAXnE,kBAAMpB,EAAOqB,KAAK,cAYnB,kBAACE,EAAA,EAAD,U,yBCrBdrB,G,OAAYC,YAAW,SAAAC,GAAK,MAAK,CACnCoB,KAAM,CACFC,OAAO,gBAAD,OAAkBrB,EAAMG,QAAQ,GAAhC,OACNmB,MAAO,QACPhB,SAAU,WACViB,SAAU,SACVC,gBAAiB,oCACjBC,iBAAkB,YAClBC,eAAgB,aAEpBC,MAAO,CACHL,MAAO,OACPD,OAAQ,OACRO,OAAQ,OACRC,QAAS,SAIXjC,EAASC,IAAG,6BAEH,aACX,IAAMO,EAAUN,IADC,EAGuBgC,mBAAS,GAHhC,mBAGVC,EAHU,KAGIC,EAHJ,OAIiBF,mBAAS,GAJ1B,mBAIVG,EAJU,KAICC,EAJD,KAwDjB,OA/BAC,oBAAU,WACN,IAAIC,EACJ,OAAOL,GACH,KAAK,EACDK,EAAYC,MACZ,MACJ,KAAK,EACDD,EAxBG,GAyBH,MACJ,KAAK,EAGL,KAAK,EACDA,EAAYC,KACZ,MACJ,KAAK,EACDD,EAjCG,GAkCH,MACJ,KAAK,EACDA,EAAYC,MAGpBzC,EAAOqB,KAAK,YAAamB,GAC5BL,EAAe,EACfnC,EAAOqB,KAAK,SA3CK,IA2CMgB,GAA0B,GAE1CrC,EAAOqB,KAAK,SA7CF,IA6CYgB,IAE3B,CAACF,EAAcE,IAId,yBAAKlB,UAAWX,EAAQgB,MACpB,kBAAC,IAAD,CAAakB,QAAS,CAAExB,MAAO,QAAUC,UAAWX,EAAQgB,KACxDmB,OAjDG,SAACC,EAAD,GAAsC,IAAvBC,EAAsB,EAA/BC,MAASD,OAAUE,EAAY,EAAZA,MAChCC,KAAmBH,EAAS,IAC5BI,EAAeC,KAAKC,MAAMJ,GAE1BE,EAAe,IAAGA,EAAe,GAEjCD,IAAkBb,GAClBC,EAAgBY,GAGhBC,IAAiBZ,GACjBC,EAAaW,Q,OCxCzBG,IAASC,OAAO,kBCFD,kBACX,kBAAC,IAAD,KACI,kBAAC,WAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWC,ODFvB,MAAYC,SAASC,eAAe,SH0H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.b8a05406.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { AppBar, Toolbar, Typography, IconButton, makeStyles } from '@material-ui/core'\nimport { PowerSettingsNew, Loop } from '@material-ui/icons'\nimport io from 'socket.io-client'\n\nconst socket = io(`http://192.168.43.54:8000`)\n\nconst useStyles = makeStyles(theme => ({\n\ticonButton: {\n\t\tmarginRight: theme.spacing(2)\n\t}\n}))\n\nexport default () => {\n    const classes = useStyles()\n    const shutdown = () => socket.emit('shutdown')\n    const reboot = () => socket.emit('reboot')\n    return (\n        <AppBar position='relative'>\n            <Toolbar>\n                <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n                    IoT Car\n                </Typography>\n                <IconButton edge='start' color='inherit' className={classes.iconButton} onClick={reboot}>\n                    <Loop />\n                </IconButton>\n                <IconButton edge='start' color='inherit' className={classes.iconButton} onClick={shutdown}>\n                    <PowerSettingsNew />\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core'\nimport ReactNipple from 'react-nipple'\nimport io from 'socket.io-client'\nimport 'react-nipple/lib/styles.css'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: `calc(100vh - ${theme.spacing(8)}px)`,\n        width: '100vw',\n        position: 'absolute',\n        overflow: 'hidden',\n        backgroundImage: \"url('http://192.168.43.54:8081/')\",\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: '100% 100%'\n    },\n    video: {\n        width: '100%',\n        height: '100%',\n        margin: 'auto',\n        zIndex: -1000\n    }\n}))\n\nconst socket = io(`http://192.168.43.54:8000`)\n\nexport default () => {\n    const classes = useStyles()\n\n    const [lastPosition, setLastPosition] = useState(1)\n    const [lastForce, setLastForce] = useState(0)\n\n    const MAX_SPEED = 255\n    const MIN_MOVE = 45 / 2\n    const CENTER = 95\n\n    const onMove = (_, { angle: { degree }, force }) => {\n        let roundedDegree = ~~(degree / 60)\n        let roundedForce = Math.round(force)\n\n        if (roundedForce > 1) roundedForce = 1 \n\n        if (roundedDegree !== lastPosition) {\n            setLastPosition(roundedDegree)\n        }\n\n        if (roundedForce !== lastForce) {\n            setLastForce(roundedForce)\n        }\n    }\n\n    useEffect(() => {\n        let direction\n        switch(lastPosition) {\n            case 0:\n                direction = CENTER + MIN_MOVE\n                break\n            case 1:\n                direction = CENTER\n                break\n            case 2:\n                direction = CENTER - MIN_MOVE\n                break\n            case 3:\n                direction = CENTER - MIN_MOVE\n                break\n            case 4:\n                direction = CENTER\n                break\n            case 5:\n                direction = CENTER + MIN_MOVE\n                break\n        }\n        socket.emit('direction', direction)\n\tif (lastPosition > 2) {\n\t    socket.emit('motors', (lastForce * MAX_SPEED) * -1)\n\t} else {\n            socket.emit('motors', lastForce * MAX_SPEED)\n\t}\n    }, [lastPosition, lastForce])\n\n\n    return (\n        <div className={classes.root}>\n            <ReactNipple options={{ color: 'blue' }} className={classes.root} \n                onMove={onMove} />\n        </div>\n    )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { unregister } from './serviceWorker'\nimport Router from './router'\n\nimport './index.css'\n\nReactDOM.render(<Router />, document.getElementById('root'))\n\nunregister()\n","import React, { Fragment } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport AppBar from './components/AppBar'\nimport Index from './pages'\n\nexport default () => (\n    <Router>\n        <Fragment>\n            <AppBar />\n            <Route path='/' component={Index} />\n        </Fragment>\n    </Router>\n)"],"sourceRoot":""}